name: Security Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '30 1 * * 0' # Weekly on Sunday at 1:30 AM
  workflow_dispatch:

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript-typescript', 'rust']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}'

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        working-directory: typescript-mcp
        run: npm ci

      - name: Check licenses
        working-directory: typescript-mcp
        run: npm run test:license

  dependency-vulnerability-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        working-directory: typescript-mcp
        run: npm ci

      - name: Run npm audit
        working-directory: typescript-mcp
        run: npm audit

      - name: Run cargo audit (Rust)
        working-directory: rust-core
        run: |
          cargo install cargo-audit
          cargo audit

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [codeql, dependency-review]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy on Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'msenol/codesight:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-container-results.sarif'

  code-quality-check:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        working-directory: typescript-mcp
        run: npm ci

      - name: Run ESLint
        working-directory: typescript-mcp
        run: npm run lint

      - name: Run TypeScript check
        working-directory: typescript-mcp
        run: npm run type-check

      - name: Run Rust format check
        working-directory: rust-core
        run: cargo fmt --check

      - name: Run Rust clippy
        working-directory: rust-core
        run: cargo clippy -- -D warnings

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs:
      [
        codeql,
        dependency-review,
        secret-scanning,
        license-check,
        dependency-vulnerability-scan,
        container-security-scan,
        code-quality-check,
      ]
    if: always()

    steps:
      - name: Generate Security Summary
        run: |
          echo "## Security Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **CodeQL Analysis**: ${{ needs.codeql.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Review**: ${{ needs.dependency-review.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Scanning**: ${{ needs.secret-scanning.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **License Compliance**: ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Vulnerability Scan**: ${{ needs.dependency-vulnerability-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Security Scan**: ${{ needs.container-security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality Check**: ${{ needs.code-quality-check.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Status" >> $GITHUB_STEP_SUMMARY
          echo "Overall security health: ${{ needs.codeql.result == 'success' && needs.dependency-review.result == 'success' && needs.secret-scanning.result == 'success' && '✅ Healthy' || '⚠️ Needs Attention' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "1. Review any failed security checks" >> $GITHUB_STEP_SUMMARY
          echo "2. Address any identified vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "3. Keep dependencies up to date" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor security alerts in repository settings" >> $GITHUB_STEP_SUMMARY
          echo "5. Regular security audits recommended" >> $GITHUB_STEP_SUMMARY
